!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e:e(jQuery)}(function(e){function t(t){var l,i=t||window.event,s=[].slice.call(arguments,1),h=0,a=0,u=0,r=0,d=0;return t=e.event.fix(i),t.type="mousewheel",i.wheelDelta&&(h=i.wheelDelta),i.detail&&(h=-1*i.detail),u=h,void 0!==i.axis&&i.axis===i.HORIZONTAL_AXIS&&(u=0,a=-1*h),i.deltaY&&(u=-1*i.deltaY,h=u),i.deltaX&&(a=i.deltaX,h=-1*a),void 0!==i.wheelDeltaY&&(u=i.wheelDeltaY),void 0!==i.wheelDeltaX&&(a=-1*i.wheelDeltaX),r=Math.abs(h),(!o||o>r)&&(o=r),d=Math.max(Math.abs(u),Math.abs(a)),(!n||n>d)&&(n=d),l=h>0?"floor":"ceil",h=Math[l](h/o),a=Math[l](a/n),u=Math[l](u/n),s.unshift(t,h,a,u),(e.event.dispatch||e.event.handle).apply(this,s)}var o,n,l=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],i="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"];if(e.event.fixHooks)for(var s=l.length;s;)e.event.fixHooks[l[--s]]=e.event.mouseHooks;e.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var e=i.length;e;)this.addEventListener(i[--e],t,!1);else this.onmousewheel=t},teardown:function(){if(this.removeEventListener)for(var e=i.length;e;)this.removeEventListener(i[--e],t,!1);else this.onmousewheel=null}},e.fn.extend({mousewheel:function(e){return e?this.bind("mousewheel",e):this.trigger("mousewheel")},unmousewheel:function(e){return this.unbind("mousewheel",e)}})});
//# sourceMappingURL=data:application/json;base64,
